import unittest
import math
from SimulacionCuantica import *
class TestMathMethods(unittest.TestCase):
        def test01_Canicas_Booleanos(self):
                ways=matriz([ [ [0,0],[0,0],[0,0],[0,0],[0,0],[0,0] ],
                              [ [0,0],[0,0],[0,0],[0,0],[0,0],[0,0] ],
                              [ [0,0],[1,0],[0,0],[0,0],[0,0],[1,0] ],
                              [ [0,0],[0,0],[0,0],[1,0],[0,0],[0,0]],
                              [ [0,0],[0,0],[1,0],[0,0],[0,0],[0,0]],
                              [ [1,0],[0,0],[0,0],[0,0],[1,0],[0,0 ] ] ])
                
                x=matriz([ [[6,0]],[[2,0]],[[1,0]],[[5,0]],[[3,0]],[[10,0]] ])
                
                ans=ways.state(x,1)
                self.assertTrue(ans == matriz([ [[ 0,0 ]],[[ 0,0 ]],[[ 12,0 ]],[[5,0]],[[ 1,0]],[[ 9,0]] ]))

        def test01_Multirendija_Probabilistico_DosRendijas(self):
                v= matriz([ [[1/3,0]],[[1/3,0]],[[1/3,0]] ])
                matrizCaminos, estado     =    experimento_multirendija_probabilistico(2,5,v)

                self.assertTrue(matrizCaminos == matriz([ [ [0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0] ],
                                                          [ [1/2,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0] ],
                                                          [ [1/2,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0] ],
                                                          [ [0,0],[1/3,0],[0,0],[1,0],[0,0],[0,0],[0,0],[0,0] ],
                                                          [ [0,0],[1/3,0],[0,0],[0,0],[1,0],[0,0],[0,0],[0,0] ],
                                                          [ [0,0],[1/3,0],[1/3,0],[0,0],[0,0],[1,0],[0,0],[0,0] ],
                                                          [ [0,0],[0,0],[1/3,0],[0,0],[0,0],[0,0],[1,0],[0,0] ],
                                                          [ [0,0],[0,0],[1/3,0],[0,0],[0,0],[0,0],[0,0],[1,0] ]] ))
                
                self.assertTrue(estado == matriz([ [[ 0,0 ]],[[ 0,0 ]],[[ 0,0 ]],[[1/6,0]],[[ 1/6,0]],[[ 1/3,0]],[[1/6,0]],[[ 1/6,0]] ]))

        def test02_Multirendija_Probabilistico_TresRendijas(self):
                matrizCaminos, estado     =    experimento_multirendija_probabilistico(3,11,1/5)

                self.assertTrue(matrizCaminos == matriz([ [ [0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0] ],
                                                          [ [1/3,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0] ],
                                                          [ [1/3,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0] ],
                                                          [ [1/3,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0] ],
                                                          [ [0,0],[1/5,0],[0,0],[0,0],[1,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0] ],
                                                          [ [0,0],[1/5,0],[0,0],[0,0],[0,0],[1,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0] ],
                                                          [ [0,0],[1/5,0],[0,0],[0,0],[0,0],[0,0],[1,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0] ],
                                                          [ [0,0],[1/5,0],[1/5,0],[0,0],[0,0],[0,0],[0,0],[1,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0] ],
                                                          [ [0,0],[1/5,0],[1/5,0],[0,0],[0,0],[0,0],[0,0],[0,0],[1,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0] ],
                                                          [ [0,0],[0,0],[1/5,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[1,0],[0,0],[0,0],[0,0],[0,0],[0,0] ],
                                                          [ [0,0],[0,0],[1/5,0],[1/5,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[1,0],[0,0],[0,0],[0,0],[0,0] ],
                                                          [ [0,0],[0,0],[1/5,0],[1/5,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[1,0],[0,0],[0,0],[0,0] ],
                                                          [ [0,0],[0,0],[0,0],[1/5,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[1,0],[0,0],[0,0] ],
                                                          [ [0,0],[0,0],[0,0],[1/5,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[1,0],[0,0] ],
                                                          [ [0,0],[0,0],[0,0],[1/5,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[1,0] ], ] ))
                
                self.assertTrue(estado == matriz([ [[ 0,0 ]],[[ 0,0 ]],[[ 0,0 ]],[[ 0,0 ]],[[1/15,0]],[[ 1/15,0]],
                                                   [[ 1/15,0]],[[2/15,0]],[[ 2/15,0]],[[ 1/15,0]],[[ 2/15,0]],[[ 2/15,0]],
                                                   [[ 1/15,0]],[[ 1/15,0]],[[ 1/15,0]]]))
                """
                Funcion para graficar ==>  graficar(estado)
                """
        def test01_Multirendija_Cuantico_DosRendijas(self):
                v= matriz([ [[-math.sqrt(6)/6,math.sqrt(6)/6]],[[-math.sqrt(6)/6,-math.sqrt(6)/6]],[[math.sqrt(6)/6,-math.sqrt(6)/6]] ])
                matrizCaminos, estado     =    experimento_multirendija_cuantico(2,5,v)

                self.assertTrue(matrizCaminos ==matriz([[ [0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0] ],
                                                        [ [0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0] ],
                                                        [ [0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0] ],
                                                        [ [1/6,0],[1/3,0],[0,0],[1,0],[0,0],[0,0],[0,0],[0,0] ],
                                                        [ [1/6,0],[1/3,0],[0,0],[0,0],[1,0],[0,0],[0,0],[0,0] ],
                                                        [ [0,0],[1/3,0],[1/3,0],[0,0],[0,0],[1,0],[0,0],[0,0] ],
                                                        [ [1/6,0],[0,0],[1/3,0],[0,0],[0,0],[0,0],[1,0],[0,0] ],
                                                        [ [1/6,0],[0,0],[1/3,0],[0,0],[0,0],[0,0],[0,0],[1,0] ] ]) )
                
                self.assertTrue(estado == matriz([ [[ 0,0 ]],[[ 0,0 ]],[[ 0,0 ]],[[1/6,0]],[[ 1/6,0]],[[ 0,0]],[[1/6,0]],[[ 1/6,0]] ]))
                graficar(estado)
        def test02_Multirendija_Cuantico_TresRendijas(self):
                v= matriz([ [[-math.sqrt(10)/10,math.sqrt(10)/10]],[[-math.sqrt(10)/10,math.sqrt(10)/10]],[[-math.sqrt(10)/10,-math.sqrt(10)/10]],[[math.sqrt(10)/10,-math.sqrt(10)/10]],[[math.sqrt(10)/10,-math.sqrt(10)/10]] ])
                matrizCaminos, estado     =    experimento_multirendija_cuantico(3,11,v)
                
                self.assertTrue(matrizCaminos ==matriz([ [  [0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0] ],
                                                          [ [0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0] ],
                                                          [ [0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0] ],
                                                          [ [0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0] ],
                                                          [ [1/15,0],[1/5,0],[0,0],[0,0],[1,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0] ],
                                                          [ [1/15,0],[1/5,0],[0,0],[0,0],[0,0],[1,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0] ],
                                                          [ [1/15,0],[1/5,0],[0,0],[0,0],[0,0],[0,0],[1,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0] ],
                                                          [ [0,0],[1/5,0],[1/5,0],[0,0],[0,0],[0,0],[0,0],[1,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0] ],
                                                          [ [0,0],[1/5,0],[1/5,0],[0,0],[0,0],[0,0],[0,0],[0,0],[1,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0] ],
                                                          [ [1/15,0],[0,0],[1/5,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[1,0],[0,0],[0,0],[0,0],[0,0],[0,0] ],
                                                          [ [0,0],[0,0],[1/5,0],[1/5,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[1,0],[0,0],[0,0],[0,0],[0,0] ],
                                                          [ [0,0],[0,0],[1/5,0],[1/5,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[1,0],[0,0],[0,0],[0,0] ],
                                                          [ [1/15,0],[0,0],[0,0],[1/5,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[1,0],[0,0],[0,0] ],
                                                          [ [1/15,0],[0,0],[0,0],[1/5,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[1,0],[0,0] ],
                                                          [ [1/15,0],[0,0],[0,0],[1/5,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[1,0] ], ] ))
               
                self.assertTrue(estado == matriz([ [[ 0,0 ]],[[ 0,0 ]],[[ 0,0 ]],[[ 0,0 ]]
                                                ,[[1/15,0]],[[ 1/15,0]],[[ 1/15,0]],
                                                [[ 0,0 ]],[[ 0,0 ]],[[1/15,0]],[[ 0,0 ]],[[ 0,0 ]],
                                                [[ 1/15,0]],[[ 1/15,0]],[[ 1/15,0]] ]))
                graficar(estado)
                
if __name__ == '__main__':
	unittest.main()
